plugins {
    id 'java-library'
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.neoforged.gradle.userdev' version '7.0.80'
    id 'net.darkhax.curseforgegradle' version '1.1.17'
    id 'com.modrinth.minotaur' version "2.+"
}

version = "${version}"
group = "${mod_group}"
base {
    archivesName = "Statues-${mc_version}"
}

// Mojang ships Java 17 to end users in 1.18+, so your mod should target Java 17.
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

minecraft.accessTransformers.file rootProject.file('src/main/resources/META-INF/accesstransformer.cfg')
//minecraft.accessTransformers.entry public net.minecraft.client.Minecraft textureManager # textureManager

runs {
    // applies to all the run configs below
    configureEach {
        // Recommended logging data for a userdev environment
        systemProperty 'forge.logging.markers', 'REGISTRIES'

        // Recommended logging level for the console
        systemProperty 'forge.logging.console.level', 'debug'

        //Limit ram usage for the dev environment to 4GB
        jvmArgument '-Xmx4G'

        modSource project.sourceSets.main
    }

    client {
        // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
        systemProperty 'forge.enabledGameTestNamespaces', "${mod_id}"
    }

    server {
        systemProperty 'forge.enabledGameTestNamespaces', "${mod_id}"
        programArgument '--nogui'
    }

    data {
        // example of overriding the workingDirectory set in configureEach above, uncomment if you want to use it
        // workingDirectory project.file('run-data')

        // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
        programArguments.addAll '--mod', "${mod_id}", '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven {
        url = "https://maven.blamejared.com"
    }
    maven {
        url = "https://maven.theillusivec4.top/"
    }
    maven {
        url = "https://maven.shedaniel.me/"
    }
    maven {
        url "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
}


dependencies {
    implementation "net.neoforged:neoforge:${neo_version}"

    compileOnly "mezz.jei:jei-${mc_version}-common-api:${jei_version}"
    compileOnly "mezz.jei:jei-${mc_version}-neoforge-api:${jei_version}"

//    runtimeOnly "mezz.jei:jei-${mc_version}-forge:${jei_version}"

    runtimeOnly "me.shedaniel:RoughlyEnoughItems-neoforge:${rei_version}"
    compileOnly "me.shedaniel:RoughlyEnoughItems-api-neoforge:${rei_version}"
    compileOnly "me.shedaniel:RoughlyEnoughItems-default-plugin-neoforge:${rei_version}"

    implementation "me.shedaniel.cloth:cloth-config-neoforge:${cloth_config_version}"
    implementation "dev.architectury:architectury-neoforge:${architectury_version}"

//    implementation "com.blamejared.crafttweaker:CraftTweaker-neoforge-${mc_version}:${crafttweaker_version}"

    implementation "top.theillusivec4.curios:curios-neoforge:${curios_version}+${mc_version}"

    implementation "vazkii.patchouli:Patchouli:${patchouli_version}"
    compileOnly "xyz.brassgoggledcoders:PatchouliProvider:${patchouli_provider_version}"

//    implementation "curse.maven:jade-324717:4980188" //Jade (WAILA)
//    implementation "curse.maven:TheOneProbe-245211:4579432" //The One probe (TOP)
}

jar {
    manifest {
        attributes(["Specification-Title"     : "${mod_id}",
                    "Specification-Vendor"    : "ShyNieke",
                    "Specification-Version"   : "1", // We are version 1 of ourselves
                    "Implementation-Title"    : project.name,
                    "Implementation-Version"  : project.jar.archiveVersion,
                    "Implementation-Vendor"   : "ShyNieke",
                    "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")])
    }
}


publishing {
    publications {
        register('mavenJava', MavenPublication) {
            groupId project.group
            artifactId base.archivesName.get()
            version project.version
            from components.java
        }
    }
    repositories {
        if (System.getenv().SAP_SECRET) {
            maven {
                url "https://maven.saps.dev/releases"
                credentials {
                    username = "mrbysco"
                    password = "${System.getenv().SAP_SECRET}"
                }
            }
        }
    }
}

if (System.getenv().CURSEFORGE_KEY) {
    task curseforge(type: net.darkhax.curseforgegradle.TaskPublishCurseForge) {
        apiToken = System.getenv().CURSEFORGE_KEY

        def mainFile = upload(project.curseforge_id, jar)
        mainFile.releaseType = 'beta'
        mainFile.addGameVersion "NeoForge"
        mainFile.addGameVersion "${mc_version}"
        mainFile.addGameVersion "Java 17"

        mainFile.changelog = file("$project.rootDir/changelog.md")
        mainFile.changelogType = 'markdown'

        mainFile.addOptional("curios", "the-cactus-mod", "roughly-enough-items", "jei", "patchouli")
    }
}

if (System.getenv().MODRINTH_KEY) {
    modrinth {
        token = System.getenv().MODRINTH_KEY
        projectId = project.modrinth_id
        versionType = "beta"
        versionName = "${mod_name} ${mc_version}"
        versionNumber = project.version
        uploadFile = jar
        changelog = file("$project.rootDir/changelog.md").text
        gameVersions = ["${mc_version}"]
        loaders = ["neoforge"]

        dependencies {
            optional.project "curios"
            optional.project "the-cactus-mod"
            optional.project "rei"
            optional.project "jei"
            optional.project "patchouli"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}